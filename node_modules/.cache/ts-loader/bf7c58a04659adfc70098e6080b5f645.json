{"remainingRequest":"/Users/matthewharding/Desktop/Techcrunch Disrupt 2019/techcrunchdisrupt2019-fe/node_modules/ts-loader/index.js??ref--12-1!/Users/matthewharding/Desktop/Techcrunch Disrupt 2019/techcrunchdisrupt2019-fe/src/store/modules/test.ts","dependencies":[{"path":"/Users/matthewharding/Desktop/Techcrunch Disrupt 2019/techcrunchdisrupt2019-fe/src/store/modules/test.ts","mtime":1570132420163},{"path":"/Users/matthewharding/Desktop/Techcrunch Disrupt 2019/techcrunchdisrupt2019-fe/node_modules/cache-loader/dist/cjs.js","mtime":1560507360114},{"path":"/Users/matthewharding/Desktop/Techcrunch Disrupt 2019/techcrunchdisrupt2019-fe/node_modules/ts-loader/index.js","mtime":1560507358238}],"contextDependencies":[],"result":["function initialState() {\n    return {\n        animal: '',\n        type: '',\n        testDate: new Date(),\n        resultDate: new Date(),\n        outcome: ''\n    };\n}\nvar state = initialState();\nvar mutations = {\n    setAnimal: function (testState, animal) {\n        testState.animal = animal;\n    }\n};\nvar actions = {};\nexport var test = {\n    state: state,\n    mutations: mutations,\n    actions: actions\n};\n",{"version":3,"file":"/Users/matthewharding/Desktop/Techcrunch Disrupt 2019/techcrunchdisrupt2019-fe/src/store/modules/test.ts","sourceRoot":"","sources":["/Users/matthewharding/Desktop/Techcrunch Disrupt 2019/techcrunchdisrupt2019-fe/src/store/modules/test.ts"],"names":[],"mappings":"AAGA,SAAS,YAAY;IACjB,OAAO;QACH,MAAM,EAAE,EAAE;QACV,IAAI,EAAE,EAAE;QACR,QAAQ,EAAE,IAAI,IAAI,EAAE;QACpB,UAAU,EAAE,IAAI,IAAI,EAAE;QACtB,OAAO,EAAE,EAAE;KACd,CAAC;AACN,CAAC;AAED,IAAM,KAAK,GAAc,YAAY,EAAE,CAAC;AAExC,IAAM,SAAS,GAA4B;IACvC,SAAS,EAAT,UAAU,SAAS,EAAE,MAAc;QAC/B,SAAS,CAAC,MAAM,GAAG,MAAM,CAAC;IAC9B,CAAC;CACJ,CAAC;AAEF,IAAM,OAAO,GAAqC,EACjD,CAAC;AAEF,MAAM,CAAC,IAAM,IAAI,GAAiC;IAC9C,KAAK,OAAA;IACL,SAAS,WAAA;IACT,OAAO,SAAA;CACV,CAAC","sourcesContent":["import { MutationTree, ActionTree, Module } from 'vuex';\nimport { RootState, TestState } from './../types';\n\nfunction initialState(): TestState {\n    return {\n        animal: '',\n        type: '',\n        testDate: new Date(),\n        resultDate: new Date(),\n        outcome: ''\n    };\n}\n\nconst state: TestState = initialState();\n\nconst mutations: MutationTree<TestState> = {\n    setAnimal(testState, animal: string) {\n        testState.animal = animal;\n    }\n};\n\nconst actions: ActionTree<TestState, RootState> = {\n};\n\nexport const test: Module<TestState, RootState> = {\n    state,\n    mutations,\n    actions\n};\n"]}]}