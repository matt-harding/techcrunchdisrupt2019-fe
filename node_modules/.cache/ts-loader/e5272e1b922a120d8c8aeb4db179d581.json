{"remainingRequest":"/Users/matthewharding/Desktop/Techcrunch Disrupt 2019/techcrunchdisrupt2019-fe/node_modules/ts-loader/index.js??ref--12-1!/Users/matthewharding/Desktop/Techcrunch Disrupt 2019/techcrunchdisrupt2019-fe/src/store/modules/general.ts","dependencies":[{"path":"/Users/matthewharding/Desktop/Techcrunch Disrupt 2019/techcrunchdisrupt2019-fe/src/store/modules/general.ts","mtime":1569865387394},{"path":"/Users/matthewharding/Desktop/Techcrunch Disrupt 2019/techcrunchdisrupt2019-fe/node_modules/cache-loader/dist/cjs.js","mtime":1560507360114},{"path":"/Users/matthewharding/Desktop/Techcrunch Disrupt 2019/techcrunchdisrupt2019-fe/node_modules/ts-loader/index.js","mtime":1560507358238}],"contextDependencies":[],"result":["function initialState() {\n    return {\n        testData: []\n    };\n}\nvar state = initialState();\nvar mutations = {\n    setTestData: function (generalState, testData) {\n        generalState.testData = testData;\n    }\n};\nvar actions = {};\nexport var general = {\n    state: state,\n    mutations: mutations,\n    actions: actions\n};\n",{"version":3,"file":"/Users/matthewharding/Desktop/Techcrunch Disrupt 2019/techcrunchdisrupt2019-fe/src/store/modules/general.ts","sourceRoot":"","sources":["/Users/matthewharding/Desktop/Techcrunch Disrupt 2019/techcrunchdisrupt2019-fe/src/store/modules/general.ts"],"names":[],"mappings":"AAGA,SAAS,YAAY;IACjB,OAAO;QACH,QAAQ,EAAE,EAAE;KACf,CAAC;AACN,CAAC;AAED,IAAM,KAAK,GAAiB,YAAY,EAAE,CAAC;AAE3C,IAAM,SAAS,GAA+B;IAC1C,WAAW,EAAX,UAAY,YAAY,EAAE,QAAa;QACnC,YAAY,CAAC,QAAQ,GAAG,QAAQ,CAAC;IACrC,CAAC;CACJ,CAAC;AAEF,IAAM,OAAO,GAAwC,EACpD,CAAC;AAEF,MAAM,CAAC,IAAM,OAAO,GAAoC;IACpD,KAAK,OAAA;IACL,SAAS,WAAA;IACT,OAAO,SAAA;CACV,CAAC","sourcesContent":["import { MutationTree, ActionTree, Module } from 'vuex';\nimport { RootState, GeneralState } from './../types';\n\nfunction initialState(): GeneralState {\n    return {\n        testData: []\n    };\n}\n\nconst state: GeneralState = initialState();\n\nconst mutations: MutationTree<GeneralState> = {\n    setTestData(generalState, testData: any) {\n        generalState.testData = testData;\n    }\n};\n\nconst actions: ActionTree<GeneralState, RootState> = {\n};\n\nexport const general: Module<GeneralState, RootState> = {\n    state,\n    mutations,\n    actions\n};\n"]}]}